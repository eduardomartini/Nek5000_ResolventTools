c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.


c ============================================================================
c           Modules used for obtaining and using Resolvent-based control 
      include 'ScalarTimeSeries.f'    ! Module for reading time series from  disk
      include 'SavePerturbations.f' ! Module for saving perturbations to disk
      include 'Load_FLD_To.f'       ! Module for loading flow snapshots to an array memory
      include 'FLD2Force.f'         ! Uses the above module to use flow snapshots as an external force.
      include 'Shapes.f'            ! Defines domain "Shapes", used as support for sensors and actuators
      include 'Control.f'           ! Control module based on a control law based on the convolution of a control Kernel and sensor readings
c ============================================================================

c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
      
      call ControlModule_usrfRoutines(ix,iy,iz,eg,ffx,ffy,ffz)
 
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      call ControlModule_usrckhRoutines

      
      return
      end

c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      if (JP==0) then
        ux=4*y*(1-y)
        uy=0.0
        uz=0.0
        temp=0.0
      else
        ux=0.0
        uy=0.0
        uz=0.0
        temp=0.0
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      if (JP==0) then
            ux = 0.0
            uy = 0.0
            uz = 0.0
      else
        call ControlModule_SetIc(x,y,z,ux,uy,uz)
      endif
      
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      call ControlModule_LoadParams
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'      

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      return
      end

c-----------------------------------------------------------------------
c-----------------------------------------------------------------------
c--------   CONTROL MODULE INTERFACE FUNCTIONS -------------------------
c-----------------------------------------------------------------------
c-----------------------------------------------------------------------

      subroutine ControlModule_LoadParams
      use Shapes
      integer :: a
      character(len=100) fileAdd1 
c      integer nio
      integer currRun,range1(2),range2(2)
      real relTol 
      COMMON /RunParams/ currRun,range1,range2,relTol

      ! Reads the run type, as well as sensor and actuator ranges 
      ! i.e. range 1-3 indicates that shapes 1,2 and 3 are used.  
      open (unit=98, file='params.input',
     $                status='old',action='read')
      read(98,*) currRun
      read(98,*) range1
      read(98,*) range2
      read(98,*) relTol
      close(98)   
      
      ! Initi "Shapes" module. 'Shapes.input' provides a parametric list of shapes.
      fileAdd1='shapes.input'
      call ReadShapesFile(fileAdd1)

      return
      end
c-----------------------------------------------------------------------
      subroutine ControlModule_SetIc(x,y,z,ux,uy,uz)
      use Shapes
      real xy,z,yx,uy,uz
      integer currRun,range1(2),range2(2)
      real relTol 
      COMMON /RunParams/ currRun,range1,range2,relTol
      ! Uses sensor/actuator shapes as initial conditions for the 
      ! adjoit/actuator run, and null initial conditions otherwise

        if ( abs(currRun)  ==  1 ) then
          call getShape(range1(1)-1+JP,x,y,z,ux,uy,uz)
        else
            ux = 0.0
            uy = 0.0
            uz = 0.0
        endif
      
      return
      end

c-----------------------------------------------------------------------
      subroutine ControlModule_usrckhRoutines
      use FLD2Force
      use Control
      use Shapes
      use ScalarTimeSeries
      use SavePerturb
      implicit none
      include 'SIZE'
      include 'TSTEP'           ! ISTEP
      include 'INPUT'           ! PARAM
      include 'SOLN'            ! V[XYZ]
      include 'GEOM'            ! xm1,ym1
      include 'ADJOINT'
      include 'MASS'

      real,external::glsum
      integer ntot,i,j 
      real pertNorm , maxnorm
      character(len=100) FLDReference 
      character(len=100) fileAdd1 
      real readings(30)
      real   ,save :: iotime_pert=-1
      integer,save :: iostep_pert=-1
      real,save :: absTol = 0 
      logical, save :: runCompleted = .false. 
      logical, save :: firstSave = .true. 
      integer currRun,range1(2),range2(2)
      real relTol 
      !Variables for saving the baseflow on the control of the non-linear problem 
      real, save :: meanFlow(lx1*ly1*lz1*lelt,3)
      real, save :: mfReadings(30)

      COMMON /RunParams/ currRun,range1,range2,relTol
      ntot = nx1*ny1*nz1*nelt
      
      ! Save Mass Matrix for post-processing
      ! Mass matrix can be useful for some post-processing. It is not needed for 
      ! control, but can be helpful to compute perturbation norms, etc 
      if (NIO==0) write(*,*) "Saving Mass Matrix on istep==0"
      if (istep==0) then
            if   (  ((npert == 1) .and. ( .not. ifbase)) .or.       ! Integration of one perturbation field
     $              ((npert == 0) .and. (       ifbase))     ) then ! Integration of one non-linear field
              if (nio==0) write(*,*) "Npert and ifbase properly set."
            else
              if (nio==0) write(*,*) "Invalid npert and ifbase..."
              call exitt
            endif

            call exportShapes()
            if (npert==1) then
              !overwrites io variables to avoid saving the meanflow on linear problems
              iotime_pert=timeio
              iostep_pert=iostep
              iostep=0
              timeio=0
              param(14)=0
              param(15)=0
            elseif (npert==0) then
              !Saves the meanflow for the control of non-linear systems
              call copy(meanFlow(1,1),VX,ntot)
              call copy(meanFlow(1,2),VY,ntot)
              if (ldim==3) call copy(meanFlow(1,3),VZ,ntot)
              mfReadings=ProjectOnShapes(0)

            endif
            !sets adjoint/direct run
            ifadj = (currRun<0) 
      endif

      ! For |currRun| == 2, use a previous runs as external force.       
      if (NIO==0) write(*,*) 'Updating Forces...'
      if ( abs(currRun)  == 2) then
            if (istep==0) then ! initialize  the "FLD2ForceInit" module 
                  fileAdd1 = 'ForceFLDLists.txt' ! file containing the adjoint run snapshots (in reverse order)
                  call FLD2ForceInit(fileAdd1)                  
            endif
            ! update the module (reads new files if needed)
            call  FLD2ForceUpdate()
      endif
      
      ! Initialize ScalarTimeSeries if on a low-rank Bf/Cz case.
      if (abs(currRun) == 3 .and. istep==0) then
       ! Reads control parameter file. Includes number of sensors, actuators, delta t and control laws.
       fileAdd1 = 'TimeSeries.txt' 
       call ScalarTimeSeries_Init(fileAdd1,GetNumShapes(),.true.,.true.)
      endif


      ! Routines for control runs (currRun=5)
      if (currRun == 5) then
        ! Initialize control on the first time step.
        if (istep ==0) then
           if (NIO==0) write(*,*) 'Initialize Control Module...  '
           fileAdd1 = 'ControlKernel.input' ! Control parameter file. Includes number of sensors, actuators, delta t and control laws.
           call ControlInit(fileAdd1)
        endif 
        
        write(*,*) 'Update Control Module...  '      
        ! Use the shapes module to obtain current sensor readings. Print them for debug purposes.
        if (npert==0) then
          readings=ProjectOnShapes(0) 
          readings=readings-mfReadings   
        else
          readings=ProjectOnShapes(1)
        endif
  
        call ControlUpdateReadings(
     $       time,readings(range1(1):range1(2)))
       
       ! Update sensor history on the "Control" module 
        call Control_CalcActuations()
       ! Print the "Control" module  sensor history  for debug.
       ! call ControlPrintReadingsHist()
       ! Print the "Control" module  current actuations.
       ! call ControlPrintActuation()
       ! Save the "Control"  module history (actuation and readings). Useful for debug.
       ! call SaveControlHist()
      endif     
      

      
      ! Save current sensor readings 
      if (npert==0) then
        ! From the non-linear run, for performance check
        call SaveProjUp2Shapes(0,0)
      else
        ! From the linear run, used for post processing and construction kernels
        call SaveProjUp2Shapes(1,1)
      endif

      ! Calculate current perturbation norm (used as a stopping criteria for 
      ! the direct/adjoint/actuator runs. Also useful to evaluate control performance.
      if (NIO==0) write(*,*) 'Computing run Norm...'
      pertNorm   = 0
      if (npert==0) then
        ! for the non-linear problem subtract the baseflow to obtain perturbations
        do i=1,ntot
          pertNorm = pertNorm+((vx(i,1,1,1)-meanFlow(i,1))**2+
     $                         (vy(i,1,1,1)-meanFlow(i,2))**2)*
     $                         bm1(i,1,1,1)
          if (ldim==3) pertNorm=pertNorm+(vz(i,1,1,1)-meanFlow(i,3))**2*  
     $                         bm1(i,1,1,1)
        end do
      else
        do i=1,ntot 
         pertNorm = pertNorm+ (vxp(i,1)**2+vyp(i,1)**2)*bm1(i,1,1,1)
         if (ldim==3) pertNorm=pertNorm+   vzp(i,1)**2 *bm1(i,1,1,1)
        end do
      endif
      pertNorm   = sqrt(glsum(pertNorm  ,1))

      ! sets run tolerance: run stops when the current norm is 10^-5 (relative norm) of the maximum norm.
      absTol = max(absTol,pertNorm*relTol)  
      if (NIO==0) write(*,*) 'AbsTol : ', absTol,
     $                       ' rel', relTol  ,' pertNorm ', pertNorm
      
      
      ! Uses "SavePerturbation" module to save flow snapshots. The prefix is a function of the current run
      if (NIO==0) write(*,*) 'Save Flow...'

      ifxyo = firstSave
      call SavePerturbations('i',iotime_pert,iostep_pert) ! adjoint run
      firstSave = .false.
      
      if (NIO==0) write(*,*) 'Checking Exit conditions...'
      ! setup exit flag if perturbation norm is smaller than tolerance. 
      ! If on a direct run also requires that all adjoint files to have been read
      if (abs(currRun)==2) then
            runCompleted = .not.  FLD2Force_StillActive() 
      elseif (abs(currRun)==3) then
            runCompleted = .not.  ScalarTimeSeries_StillActive() 
      else
            runCompleted =.true.
      end if
           
      if (pertNorm<absTol.and.runCompleted.and.abs(currRun)<= 3) then
        ! write(*,*) "Exit Conditions met:",pertNorm,absTol,runCompleted.and.abs(currRun)
        call exitt
      end if
      return
      end


c-----------------------------------------------------------------------

      subroutine ControlModule_usrfRoutines(ix,iy,iz,eg,ff_x,ff_y,ff_z)
      use FLD2Force
      use Control
      use Shapes
      use ScalarTimeSeries
      implicit none
      include 'SIZE'
      include 'TOTAL'      
      include 'NEKUSE'
      integer ix,iy,iz,eg,e
      real ff_x,ff_y,ff_z
      real fff_x,fff_y,fff_z

      real famp
      ! variables for initializing and using random seed 
      real tmp_rand(2)
      integer i,n
      logical,save :: firstCall = .true.
      integer , save :: lastISTEP = -1 , icount = 0
      INTEGER, DIMENSION(:), ALLOCATABLE :: seed
      real values(10)

      real tmp
      ! Run parameters Module
      integer currRun,range1(2),range2(2)
      real relTol 
      COMMON /RunParams/ currRun,range1,range2,relTol
      integer nidd,npp,nekcomm,nekgroup,nekreal
      common /nekmpi/ nidd,npp,nekcomm,nekgroup,nekreal

      e = gllel(eg)
      
      if (firstCall) then
        CALL RANDOM_SEED(size = n)
        ALLOCATE(seed(n))
        seed=nidd
        CALL RANDOM_SEED(PUT = seed)
c        call random_init(.true., .true.)
        DEALLOCATE(seed)
        firstCall=.false.
      endif
      
      ff_x = 0
      ff_y = 0
      ff_z = 0        
      ! Check for current run type, and setups external forces accordling
      if ( abs(currRun)  == 2 ) then
        ! Full rank external forces 
        call FLD2Force_GetF(ix,iy,iz,eg,fff_x,fff_y,fff_z)
        ff_x = ff_x+fff_x
        ff_y = ff_y+fff_y
        ff_z = ff_z+fff_z
        if ( currRun  == 2  .and. x>=-5) then ! B=0 for x>-5,
          ff_x = 0
          ff_y = 0
          ff_z = 0
        endif
      elseif ( abs(currRun)  == 3   ) then
        ! Low rank forcing
        ! Shape indexes for components of B/Cz should be stored in range1
        call ScalarTimeSeries_Get(time,range1,values)
        do i=1,range1(2)-range1(1)+1
          call getShape(range1(1)+(i-1),x,y,z,fff_x,fff_y,fff_z) 
          ff_x = ff_x + fff_x*values(i)
          ff_y = ff_y + fff_y*values(i)
          ff_z = ff_z + fff_z*values(i)
        enddo
      elseif (currRun == 4 .or. currRun == 5  ) then
        ! Generates a pseudo random external force for random and control run
        famp=relTol ! uses relTol (not used for currRun 4-5) as force amplitude
        if (x<=-5  ) then
          tmp = bm1(ix,iy,iz,e)
          call random_number(tmp_rand)
          ff_x= ff_x+2*(tmp_rand(1)-0.5)*3/sqrt(dt*bm1(ix,iy,iz,e))*famp
          call random_number(tmp_rand)
          ff_y= ff_y+2*(tmp_rand(1)-0.5)*3/sqrt(dt*bm1(ix,iy,iz,e))*famp
          call random_number(tmp_rand)
          ff_z= ff_z+2*(tmp_rand(1)-0.5)*3/sqrt(dt*bm1(ix,iy,iz,e))*famp
        endif
      endif
      
      if (currRun == 5) then
        !If on control run, uses the "Control" module to compute the actuation of each actuator.
        do i=1,(range2(2)-range2(1)+1) ! loop from 1 to the number of actuators
          call getShape(range2(1)-1+i,x,y,z,fff_x,fff_y,fff_z) ! get the shape of the i-th actuator
          
          ! Add actuation to the external forces
          ff_x = ff_x + Control_Actuation(i)*fff_x
          ff_y = ff_y + Control_Actuation(i)*fff_y
          ff_z = ff_z + Control_Actuation(i)*fff_z
        enddo
      endif

      return 
      end
